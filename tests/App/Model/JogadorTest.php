<?php

namespace App\Model;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-31 at 02:17:11.
 * @author Grupo PHP
 * @version 0.1
 * 
 */
class JogadorTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Jogador
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Jogador;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @author Helison Teixeira <helisonreus@gmail.com>
     * @covers App\Model\Jogador::getId
     * @covers App\Model\Jogador::setId
     */
    public function testGetSetId() {
        $valoresId = array('1', '2', '4', '24', '94', '5', '0', '92', '124', '232147');
        foreach ($valoresId as $value) {
            $this->object->setId($value);
            $this->assertEquals($this->object->getId(), $value);
        }
    }

    /**
     * @author Helison Teixeira <helisonreus@gmail.com>
     * @covers App\Model\Jogador::setId
     * @covers App\Model\Jogador::getId
     */
    public function testGetSetIdWithWrongValues() {
        $valoresId = array('D', 'P', 'X', 'U', 'O', '88', '18', 'o47', '50', '941', '41', '41', '24', '4u23', '876', 'P0X4', 'T35T3');
        try {
            foreach ($valoresId as $value) {
                $this->object->setId($value);
                $this->assertEquals($this->object->getId(), $value);
            }
        } catch (InvalidArgumentException $expected) {
            return;
        }$this->fail('Uma exceção não ocorreu, pois foi possível setar um ID inválido.');
    }

    /**
     * @author Helison Teixeira <helisonreus@gmail.com>
     * @covers App\Model\Jogador::getEscolha
     * @covers App\Model\Jogador::setEscolha
     */
    public function testGetSetEscolha() {
        $valoresEscolha = array('par', 'impar');
        foreach ($valoresEscolha as $value) {
            $this->object->setEscolha($value);
            $this->assertEquals($this->object->getEscolha(), $value);
        }
    }

    /**
     * @author Helison Teixeira <helisonreus@gmail.com>     
     * @covers App\Model\Jogador::getEscolha
     * @covers App\Model\Jogador::setEscolha
     */
    public function testSetEscolhaWithWrongValues() {
                $valoresEscolha = array('par', 'impar','truco','p4r','1mp4r','bleh');
        try {
                    foreach ($valoresEscolha as $value) {
            $this->object->setEscolha($value);
            $this->assertEquals($this->object->getEscolha(), $value);
        }

        } catch (InvalidArgumentException $expected) {
            return;
        }$this->fail('Uma exceção não ocorreu, pois foi possível escolher um valor que nao eh par nem impar.');
    }

    /**
     * @covers App\Model\Jogador::getCartas
     * @todo   Implement testGetCartas().
     */
    public function testGetCartas() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers App\Model\Jogador::setCartas
     * @todo   Implement testSetCartas().
     */
    public function testSetCartas() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers App\Model\Jogador::addCartas
     * @todo   Implement testAddCartas().
     */
    public function testAddCartas() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers App\Model\Jogador::count
     * @todo   Implement testCount().
     */
    public function testCount() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
