<?php

namespace MRCartas;

use MRCartas\Carta;

/**
 * Test class for Carta.
 * Generated by PHPUnit on 2012-05-25 at 19:43:50.
 */
class DescarteTest extends \PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    private function popularBaralho($baralho) {
        $naipes = array('paus', 'ouro', 'espada', 'copas');
        $valores = array('A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3', '2');
        foreach ($naipes as $naipe) {
            foreach ($valores as $value) {
                $carta = new Carta();
                $carta->setNaipe($naipe);
                $carta->setValor($value);
                $baralho->addCarta($carta);
            }
        }
    }

    /**
     * Testa se o metodo removerCartas() retira todas as cartas do descarte e as
     * retorna.
     *
     * @covers MRCartas\Descarte::removerCartas
     * @author thiago
     */
    public function testRemoverCartas() {
        $baralho = new Descarte();
        $this->popularBaralho($baralho);

        $this->assertNotNull($baralho);
        $this->assertEquals($baralho->count(), 52);

        $cartasRemovidas = $baralho->removerCartas();

        $this->assertEquals($baralho->count(), 0);

        $novoBaralho = new Descarte();
        $this->popularBaralho($novoBaralho);
        $cartas = $novoBaralho->removerCartas();

        $this->assertEquals($cartasRemovidas, $cartas);
    }

    /**
     * Testa se o metodo verCarta() obtém a carta na posição desejada.
     *
     * @covers MRCartas\Descarte::verCarta
     * @author thiago
     */
    public function testVerCarta() {
        $descarte = new Descarte();
        $this->popularBaralho($descarte);

        $naipes = array('paus', 'ouro', 'espada', 'copas');
        $valores = array('A', 'K', 'Q', 'J', '10', '9', '8', '7', '6', '5', '4', '3', '2');

        $i = 0;
        foreach ($naipes as $naipe) {
            foreach ($valores as $value) {
                $this->assertEquals($descarte->verCarta($i)->getNaipe(), $naipe);
                $this->assertEquals($descarte->verCarta($i)->getValor(), $value);
                $i++;
            }
        }
    }
}
